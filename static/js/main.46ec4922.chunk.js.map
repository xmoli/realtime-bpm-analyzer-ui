{"version":3,"sources":["AudioPlayer.js","App.js","reportWebVitals.js","index.js"],"names":["AudioPlayer","useState","Info","setInfo","bpm","setBpm","handleLoadAudioSource","e","file","target","files","name","audio","document","getElementById","src","URL","createObjectURL","setAttribute","audioContext","AudioContext","source","createMediaElementSource","scriptProcessorNode","createScriptProcessor","connect","destination","onAudioProcess","RealTimeBPMAnalyzer","scriptNode","bufferSize","numberOfInputChannels","numberOfOutputChannels","pushTime","pushCallback","err","onaudioprocess","analyze","initAnalyzer","AddFile","type","id","accept","hidden","onInput","htmlFor","style","fontSize","fontWeight","borderRadius","borderColor","background","color","controls","autoPlay","crossOrigin","map","v","i","tempo","toString","reduce","a","b","count","App","title","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oPAkFeA,MA/Cf,WAAuB,IAAD,EACMC,mBAAS,IADf,mBACXC,EADW,KACLC,EADK,OAEIF,qBAFJ,mBAEXG,EAFW,KAENC,EAFM,KAIlB,SAASC,EAAuBC,GAC5B,IAAIC,EAAOD,EAAEE,OAAOC,MAAM,GAC1BP,EAAQK,EAAKG,MACb,IAAIC,EAAQC,SAASC,eAAe,SAChCC,EAAMC,IAAIC,gBAAgBT,GAC9BI,EAAMM,aAAa,MAAOH,GAxClC,SAAsBH,EAAOP,GAEzB,IAAMc,EAAe,IAAIC,aAEnBC,EAASF,EAAaG,yBAAyBV,GAE/CW,EAAsBJ,EAAaK,sBAAsB,KAAM,EAAG,GAExED,EAAoBE,QAAQN,EAAaO,aACzCL,EAAOI,QAAQF,GACfF,EAAOI,QAAQN,EAAaO,aAE5B,IAAMC,EAAiB,IAAIC,IAAoB,CAC3CC,WAAY,CACRC,WAAY,KACZC,sBAAuB,EACvBC,uBAAwB,GAE5BC,SAAU,IACVC,aAAc,SAACC,EAAK/B,GACZA,GACAC,EAAOD,MAKnBmB,EAAoBa,eAAiB,SAAC7B,GAClCoB,EAAeU,QAAQ9B,IAevB+B,CAAa1B,EAAOP,GAGxB,IAAIkC,EAAU,kBAAK,gCACf,uBAAOC,KAAK,OAAOC,GAAG,eAAeC,OAAO,YAC5CC,QAAM,EACNC,QAAStC,IAET,uBAAOuC,QAAQ,eACfC,MAAO,CAACC,SAAU,OAAQC,WAAW,QADrC,mBAKJ,OACI,gCACI,cAACT,EAAD,IACA,qBAAKE,GAAG,YACRK,MAAO,CAACG,aAAc,MACtBC,YAAa,QAAQC,WAAY,QAASC,MAAO,WAIjD,uBAAOX,GAAG,QAAQY,UAAQ,EAACC,UAAQ,EAACC,YAAY,cAGhD,sBAAKd,GAAG,QAAR,UACI,4BAAIvC,IADR,QAEUE,EAAMA,EAAIoD,KAAI,SAACC,EAAEC,GAAH,OAAS,iCAA0BD,EAAEE,MAA5B,MAAWD,EAAEE,eAAiC,EAC3E,uCACOxD,EAAMA,EAAIyD,QAAO,SAACC,EAAEC,GAAH,OAASD,EAAEE,MAAMD,EAAEC,MAAOF,EAAEC,KAAIJ,MAAO,YC7DhEM,MAXf,WAEE,OADApD,SAASqD,MAAQ,eAEf,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACA,cAAC,EAAD,SCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlE,SAASC,eAAe,SAM1BsD,M","file":"static/js/main.46ec4922.chunk.js","sourcesContent":["import RealTimeBPMAnalyzer from 'realtime-bpm-analyzer'\n\nimport { useState } from 'react'\n\nfunction initAnalyzer(audio, setBpm) {\n    // Create new instance of AudioContext\n    const audioContext = new AudioContext();\n    // Set the source with the HTML Audio Node\n    const source = audioContext.createMediaElementSource(audio);\n    // Set the scriptProcessorNode to get PCM data in real time\n    const scriptProcessorNode = audioContext.createScriptProcessor(4096, 1, 1);\n    // Connect everythings together\n    scriptProcessorNode.connect(audioContext.destination);\n    source.connect(scriptProcessorNode);\n    source.connect(audioContext.destination);\n\n    const onAudioProcess = new RealTimeBPMAnalyzer({\n        scriptNode: {\n            bufferSize: 4096,\n            numberOfInputChannels: 1,\n            numberOfOutputChannels: 1\n        },\n        pushTime: 2000,\n        pushCallback: (err, bpm) => {\n            if (bpm){\n                setBpm(bpm)\n            }\n        }\n    });\n    // Attach realTime function to audioprocess event.inputBuffer (AudioBuffer)\n    scriptProcessorNode.onaudioprocess = (e) => {\n        onAudioProcess.analyze(e);\n    };\n}\n\nfunction AudioPlayer(){\n    const [Info, setInfo] = useState('')\n    const [bpm, setBpm] = useState()\n\n    function handleLoadAudioSource (e){\n        let file = e.target.files[0]\n        setInfo(file.name)\n        let audio = document.getElementById('track')\n        let src = URL.createObjectURL(file)\n        audio.setAttribute(\"src\", src)\n\n        initAnalyzer(audio, setBpm)\n    }\n\n    let AddFile = ()=>(<div>\n        <input type=\"file\" id=\"audio_source\" accept=\"audio/mp3\"\n        hidden \n        onInput={handleLoadAudioSource}\n        ></input>\n        <label htmlFor=\"audio_source\" \n        style={{fontSize: '50px', fontWeight:'bold'}}\n        >+</label>\n    </div>)\n    \n    return (\n        <div>\n            <AddFile/>\n            <div id=\"file_list\"\n            style={{borderRadius: '5px', \n            borderColor: 'white',background: 'white', color: 'black'}}\n            >\n            </div>\n\n            <audio id=\"track\" controls autoPlay crossOrigin=\"anonymous\"\n            ></audio>\n\n            <div id=\"print\">\n                <p>{Info}</p>\n                BPM: {bpm ? bpm.map((v,i) => <span key={i.toString()}>{v.tempo} </span>) : 0}\n                <p>\n                Best: {bpm ? bpm.reduce((a,b) =>(a.count>b.count? a:b)).tempo: 0}\n                </p>\n            </div>\n        </div>\n    )\n}\n\nexport default AudioPlayer","import './App.css';\nimport AudioPlayer from './AudioPlayer'\n\nfunction App() {\n  document.title = \"BPM Analyzer\"\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <AudioPlayer/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}